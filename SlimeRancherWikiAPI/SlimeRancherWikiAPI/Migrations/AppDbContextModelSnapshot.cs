// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlimeRancherWikiAPI.Data;

#nullable disable

namespace SlimeRancherWikiAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.FoodLocation", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("FoodId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("FoodLocations");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Plort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvgPrice")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPrice")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Plorts");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Slime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DietId")
                        .HasColumnType("int");

                    b.Property<int?>("FavFoodId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlortId")
                        .HasColumnType("int");

                    b.Property<int?>("ToyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DietId");

                    b.HasIndex("FavFoodId")
                        .IsUnique()
                        .HasFilter("[FavFoodId] IS NOT NULL");

                    b.HasIndex("PlortId")
                        .IsUnique()
                        .HasFilter("[PlortId] IS NOT NULL");

                    b.HasIndex("ToyId")
                        .IsUnique()
                        .HasFilter("[ToyId] IS NOT NULL");

                    b.ToTable("Slimes");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.SlimeLocation", b =>
                {
                    b.Property<int>("SlimeId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("SlimeId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("SlimeLocations");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Toy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Food", b =>
                {
                    b.HasOne("SlimeRancherWikiAPI.Models.Diet", "Diet")
                        .WithMany("Foods")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.FoodLocation", b =>
                {
                    b.HasOne("SlimeRancherWikiAPI.Models.Food", "Food")
                        .WithMany("FoodLocation")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlimeRancherWikiAPI.Models.Location", "Location")
                        .WithMany("FoodLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Slime", b =>
                {
                    b.HasOne("SlimeRancherWikiAPI.Models.Diet", "Diet")
                        .WithMany("Slimes")
                        .HasForeignKey("DietId");

                    b.HasOne("SlimeRancherWikiAPI.Models.Food", "FavFood")
                        .WithOne("Slime")
                        .HasForeignKey("SlimeRancherWikiAPI.Models.Slime", "FavFoodId");

                    b.HasOne("SlimeRancherWikiAPI.Models.Plort", "Plort")
                        .WithOne("Slime")
                        .HasForeignKey("SlimeRancherWikiAPI.Models.Slime", "PlortId");

                    b.HasOne("SlimeRancherWikiAPI.Models.Toy", "Toy")
                        .WithOne("Slime")
                        .HasForeignKey("SlimeRancherWikiAPI.Models.Slime", "ToyId");

                    b.Navigation("Diet");

                    b.Navigation("FavFood");

                    b.Navigation("Plort");

                    b.Navigation("Toy");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.SlimeLocation", b =>
                {
                    b.HasOne("SlimeRancherWikiAPI.Models.Location", "Location")
                        .WithMany("SlimeLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlimeRancherWikiAPI.Models.Slime", "Slime")
                        .WithMany("SlimeLocation")
                        .HasForeignKey("SlimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Slime");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Diet", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Slimes");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Food", b =>
                {
                    b.Navigation("FoodLocation");

                    b.Navigation("Slime");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Location", b =>
                {
                    b.Navigation("FoodLocation");

                    b.Navigation("SlimeLocation");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Plort", b =>
                {
                    b.Navigation("Slime");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Slime", b =>
                {
                    b.Navigation("SlimeLocation");
                });

            modelBuilder.Entity("SlimeRancherWikiAPI.Models.Toy", b =>
                {
                    b.Navigation("Slime");
                });
#pragma warning restore 612, 618
        }
    }
}
